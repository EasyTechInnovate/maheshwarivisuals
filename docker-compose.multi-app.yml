version: '3.9'

services:
  # Database
  mongo:
    container_name: mongo_container
    image: 'mongo:7'
    volumes:
      - mongo-data:/data/db
    networks:
      - app-net
    env_file:
      - .env.development
    command: mongod --bind_ip_all
    restart: always
    profiles:
      - development
      - qa
      - production

  # Backend Server
  server:
    container_name: server
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.server
      target: server-development
    ports:
      - '5000:5000'
    depends_on:
      - mongo
    env_file:
      - .env.development
    volumes:
      - ./server/src:/usr/src/app/src
      - ./server/package.json:/usr/src/app/package.json
      - ./server/nodemon.json:/usr/src/app/nodemon.json
    networks:
      - app-net
    profiles:
      - development

  # User App (React Vite on port 5173)
  app:
    container_name: app
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.app
      target: app-development
    ports:
      - '5173:5173'
    restart: always
    env_file:
      - .env.development
    volumes:
      - ./app/src:/app/src
      - ./app/package.json:/app/package.json
    depends_on:
      - server
    networks:
      - app-net
    profiles:
      - development

  # Admin App (React Vite on port 8000)
  admin:
    container_name: admin
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.admin
      target: admin-development
    ports:
      - '8000:8000'
    restart: always
    env_file:
      - .env.development
    volumes:
      - ./admin/src:/app/src
      - ./admin/package.json:/app/package.json
    depends_on:
      - server
    networks:
      - app-net
    profiles:
      - development

  # Client App (Next.js on port 3000)
  client:
    container_name: client
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.client
      target: client-development
    ports:
      - '3000:3000'
    restart: always
    env_file:
      - .env.development
    volumes:
      - ./client/src:/app/src
      - ./client/package.json:/app/package.json
    depends_on:
      - server
    networks:
      - app-net
    profiles:
      - development

  # =================================
  # QA ENVIRONMENT
  # =================================

  # QA MongoDB
  qa-mongo:
    container_name: qa-mongo
    image: 'mongo:7'
    volumes:
      - qa-mongo-data:/data/db
    networks:
      - qa-net
    env_file:
      - .env.qa
    command: mongod --bind_ip_all
    restart: always
    profiles:
      - qa

  # QA Server
  qa-server:
    container_name: qa-server
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.server
      target: server-qa
    env_file:
      - .env.qa
    expose:
      - "5000"
    depends_on:
      - qa-mongo
    networks:
      - qa-net
    profiles:
      - qa

  # QA User App
  qa-app:
    container_name: qa-app
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.app
      target: app-qa
    restart: always
    env_file:
      - .env.qa
    expose:
      - "80"
    networks:
      - qa-net
    profiles:
      - qa

  # QA Admin App
  qa-admin:
    container_name: qa-admin
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.admin
      target: admin-qa
    restart: always
    env_file:
      - .env.qa
    expose:
      - "80"
    networks:
      - qa-net
    profiles:
      - qa

  # QA Client App (Next.js)
  qa-client:
    container_name: qa-client
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.client
      target: client-qa
    restart: always
    env_file:
      - .env.qa
    expose:
      - "3000"
    networks:
      - qa-net
    profiles:
      - qa

  # QA Nginx Reverse Proxy
  qa-nginx:
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.nginx
      args:
        - ENVIRONMENT=qa
    container_name: qa-nginx
    ports:
      - '8080:80'
      - '8443:443'
    volumes:
      - ./nginx/nginx.multi-app.qa.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL certificates (update paths as needed)
      - /etc/letsencrypt/live/qa-fd-md.manishdashsharma.site/fullchain.pem:/etc/letsencrypt/live/qa-fd-md.manishdashsharma.site/fullchain.pem:ro
      - /etc/letsencrypt/live/qa-fd-md.manishdashsharma.site/privkey.pem:/etc/letsencrypt/live/qa-fd-md.manishdashsharma.site/privkey.pem:ro
    restart: always
    networks:
      - qa-net
    depends_on:
      - qa-server
      - qa-client
      - qa-app
      - qa-admin
    profiles:
      - qa

  # =================================
  # PRODUCTION ENVIRONMENT
  # =================================

  # Production MongoDB
  prod-mongo:
    container_name: prod-mongo
    image: 'mongo:7'
    volumes:
      - prod-mongo-data:/data/db
    networks:
      - prod-net
    env_file:
      - .env.production
    command: mongod --bind_ip_all
    restart: always
    profiles:
      - production

  # Production Server
  prod-server:
    container_name: prod-server
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.server
      target: server-production
    env_file:
      - .env.production
    expose:
      - "5000"
    depends_on:
      - prod-mongo
    networks:
      - prod-net
    profiles:
      - production

  # Production User App
  prod-app:
    container_name: prod-app
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.app
      target: app-production
    restart: always
    env_file:
      - .env.production
    expose:
      - "80"
    networks:
      - prod-net
    profiles:
      - production

  # Production Admin App
  prod-admin:
    container_name: prod-admin
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.admin
      target: admin-production
    restart: always
    env_file:
      - .env.production
    expose:
      - "80"
    networks:
      - prod-net
    profiles:
      - production

  # Production Client App (Next.js)
  prod-client:
    container_name: prod-client
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.client
      target: client-production
    restart: always
    env_file:
      - .env.production
    expose:
      - "3000"
    networks:
      - prod-net
    profiles:
      - production

  # Production Nginx Reverse Proxy
  prod-nginx:
    build:
      context: .
      dockerfile: ./Docker/Dockerfile.nginx
      args:
        - ENVIRONMENT=prod
    container_name: prod-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.multi-app.prod.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL certificates (update paths as needed)
      - /etc/letsencrypt/live/prod-fd-md.manishdashsharma.site/fullchain.pem:/etc/letsencrypt/live/prod-fd-md.manishdashsharma.site/fullchain.pem:ro
      - /etc/letsencrypt/live/prod-fd-md.manishdashsharma.site/privkey.pem:/etc/letsencrypt/live/prod-fd-md.manishdashsharma.site/privkey.pem:ro
    restart: always
    networks:
      - prod-net
    depends_on:
      - prod-server
      - prod-client
      - prod-app
      - prod-admin
    profiles:
      - production

networks:
  app-net:
    driver: bridge
  qa-net:
    driver: bridge
  prod-net:
    driver: bridge

volumes:
  mongo-data:
  qa-mongo-data:
  prod-mongo-data: